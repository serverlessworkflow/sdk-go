// Copyright 2020 The Serverless Workflow Specification Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import "fmt"
import "encoding/json"

type Function struct {
	// Metadata corresponds to the JSON schema field "metadata".
	Metadata Metadata_1 `json:"metadata,omitempty"`

	// Unique function name
	Name string `json:"name"`

	// Combination of the function/service OpenAPI definition URI and the operationID
	// of the operation that needs to be invoked, separated by a '#'. For example
	// 'https://petstore.swagger.io/v2/swagger.json#getPetById'
	Operation *string `json:"operation,omitempty"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Function) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain Function
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Function(plain)
	return nil
}

// Serverless Workflow specification - functions schema
type Functions map[string]interface{}
