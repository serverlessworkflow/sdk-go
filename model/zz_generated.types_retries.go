// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
)

type Retrydef struct {
	// Time delay between retry attempts (ISO 8601 duration format)
	Delay *string `json:"delay,omitempty"`

	// If float type, maximum amount of random time added or subtracted from the delay
	// between each retry relative to total delay (between 0 and 1). If string type,
	// absolute maximum amount of random time added or subtracted from the delay
	// between each retry (ISO 8601 duration format)
	Jitter interface{} `json:"jitter,omitempty"`

	// Maximum number of retry attempts.
	MaxAttempts interface{} `json:"maxAttempts"`

	// Multiplier value by which interval increases during each attempt (ISO 8601 time
	// format)
	Multiplier *string `json:"multiplier,omitempty"`

	// Unique retry strategy name
	Name string `json:"name"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Retrydef) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["maxAttempts"]; !ok || v == nil {
		return fmt.Errorf("field maxAttempts: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name: required")
	}
	type Plain Retrydef
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Retrydef(plain)
	return nil
}

// Serverless Workflow specification - retries schema
type Retries map[string]interface{}
